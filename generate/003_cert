#!/bin/sh

if ! [ $# -eq 3 ]; then
	echo "Syntax: 003_cert <sw> CONFIG|DECONFIG <output-script>" >&2
	exit 8
fi
sw="$1"
verb="$2"
script="$3"

zospm=`whence zospm`
zospmdir=${zospm%/*}
zospmroot=${zospmdir%/*}

cat << EOF >${script}
#!/bin/sh
#set -x
export verb="${verb}"
export PATH=${zospmdir}:\$PATH
export sw="${sw}"
. zospmsetswenv "${sw}"

set +x
EOF

if [ $? -gt 0 ]; then
	echo "Unable to create ${sw} Update script: ${script}." >&2
	exit 16
fi
chmod u+x "${script}"

if [ "${verb}" = "DECONFIG" ]; then
cat <<'EOF' >>${script}
SetupCertificates() {
	return 0
}
SetupRACF() {
	return 0
}
SetupTopSecret() {
	echo "003_cert Need to implement TopSecret CONFIG" >&2
	return 8
}
SetupACF2() {
	echo "003_cert Need to implement ACF2 CONFIG" >&2
	return 8
}

EOF
else
cat <<'EOF' >>${script}
SetupRACF() {
	export name="${ZWE_PKCS11_TOKEN_NAME}"  
	export label="${ZWE_PKCS11_TOKEN_LABEL}"  
	export user="${ZWE_PKCS11_TOKEN_CREATOR}"  
	if `undefinedProperty "${name}"` ; then
		echo "003_cert ZWE_PKCS11_TOKEN_NAME must be defined" >&2
		return 8
	fi
	if `undefinedProperty "${label}"` ; then
		echo "003_cert ZWE_PKCS11_TOKEN_LABEL must be defined" >&2
		return 8
	fi
	if `undefinedProperty "${user}"` ; then
		echo "003_cert ZWE_PKCS11_TOKEN_CREATOR must be defined" >&2
		return 8
	fi

	racfSetGenericClasses "CRYPTOZ"
	chk "$?" "Unable to configure ${sw}"
	racfActivateAndShareClasses "CRYPTOZ"
	chk "$?" "Unable to configure ${sw}"

	if ! `racfProfileExists "CRYPTOZ" "SO.**"` ; then
		issueTSO "RDEFINE CRYPTOZ SO.** UACC(NONE)"
		chk "$?" "Unable to define CRYPTOZ profile SO.**"
	fi
	if ! `racfProfileExists "CRYPTOZ" "USER.${name}"` ; then
		issueTSO "RDEFINE CRYPTOZ USER.${name} UACC(NONE)"
		chk "$?" "Unable to define CRYPTOZ profile USER.${PKCS11_TOKEN_NAME}"
	fi
	racfPermitUsers "CRYPTOZ" "SO.**" "UPDATE" "${user}"
	chk "$?" "Unable to configure ${sw}"

	racfPermitUsers "CRYPTOZ" "USER.${name}" "UPDATE" "${user}"
	chk "$?" "Unable to configure ${sw}"

	racfRefreshClasses "CRYPTOZ"
	chk "$?" "Unable to configure ${sw}"

	return 0
}

SetupTopSecret() {
	echo "003_cert Need to implement TopSecret DECONFIG" >&2
	return 8
}

SetupACF2() {
	echo "003_cert Need to implement ACF2 DECONFIG" >&2
	return 8
}
SetupCertificates() {
	ZOWE_ROOT="${ZOSPM_TGT_ZFSROOT}/usr/lpp/zowe/"
	zospmZoweConfigFile="${ZOSPM_TMP}/zoweconfig.$$.tmp"
	echo "
              	HOSTNAME=${ZWE_HOSTNAME}
		IPADDRESS=${ZWE_IPADDRESS}
		VERIFY_CERTIFICATES=${ZWE_VERIFY_CERTIFICATES}
		EXTERNAL_CERTIFICATE=${ZWE_EXTERNAL_CERTIFICATE}
		EXTERNAL_CERTIFICATE_ALIAS=${ZWE_CERTIFICATE_ALIAS}
		EXTERNAL_CERTIFICATE_AUTHORITIES=${ZOSPM_CERTIFICATE_AUTHORITES}
		ZOSMF_CERTIFICATE=${ZOS240_ZOSMF_CERTIFICATE}
		KEYSTORE_PASSWORD=${ZWE_KEYSTORE_PASSWORD}
		KEYSTORE_DIRECTORY=${ZWE_KEYSTORE_DIRECTORY}
		KEYSTORE_ALIAS=${ZWE_KEYSTORE_ALIAS}
		ZOWE_USER_ID=${ZWE_ZOWEUSER}
		ZOWE_GROUP_ID=${ZWE_ADMINGRP}
		PKCS11_TOKEN_NAME=${ZWE_PKCS11_TOKEN_NAME}  
		PKCS11_TOKEN_LABEL=${ZWE_PKCS11_TOKEN_LABEL}  
	" >${zospmZoweConfigFile}
	${ZOWE_ROOT}/bin/zowe-setup-certificates.sh -p ${zospmZoweConfigFile}

	return 0
}
EOF
fi

cat <<'EOF' >>${script}
export sw="${sw}"
. zospmsetswenv "${sw}"
#set -x
sp=`secmgr`
if [ "${sp}" = "RCVT" ]; then                                       
        SetupRACF
elif [ "${sp}" = "TSS" ]; then
        SetupTopSecret                                               
elif [ "${sp}" = "ACF2" ]; then                                     
        SetupACF2
else
        echo "Error: Unsupported security manager: ${sp}" >&2        
        exit 16                                                      
fi
rc=$?
if [ $rc -gt 0 ]; then
	exit $rc
fi

SetupCertificates
exit $?

EOF
exit 0  
